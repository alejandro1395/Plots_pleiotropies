newsort_Counts_table <- new_Counts_table[order(new_Counts_table$Combined_diseases),]
ggplot(data = newsort_Counts_table,
aes(x = 1, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ Combined_diseases) + scale_fill_manual(values=c("#997799", "#E69F00")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())# what's the reader looking at?
#Chi-square table and props
rownames(Counts_table) <- Counts_table[,1]
Counts_table <- Counts_table[,2:3]
chisq.test(Counts_table)
Counts_table<-Counts_table %>% rownames_to_column('new_column')
Counts_table_filtered = Counts_table[ rowSums(Counts_table)!=0, ]
#MOSAIC PLOT
Counts_table <- as.matrix(Counts_table)
mosaic(Counts_table, gp=shading_Friendly2, residuals=chisq.test(Counts_table)$stdres,
residuals_type="Std \ nresiduals",  labeling_args=list(gp_labels=gpar(fontsize=8)),
legend=TRUE,
direction = "h", rot_labels=c(0,0,0,0), spacing = spacing_increase(rate = 1.2) ) # mosaic plot
new_Counts_table
new_Counts_table[c('domainA','domainB')] <- colsplit(new_Counts_table$Combined_diseases,'_',c('domainA','domainB'))
new_Counts_table
library(ape)
library(geiger)
library(nlme)
library(phytools)
library(ggplot2)
library(qqman)
library(qualityTools)
library(Haplin)
library(gridBase)
library(readr)
library(dplyr)
library(reshape2)
library(tibble)
###############
###############
#PHENOTIPIC DB#
###############
#Import Phenotypes from AnAge
Counts_table <- read.csv("freqs_Agon_Antagon.tsv", header = TRUE, sep="\t")
View(Counts_table)
#Description plots
new_Counts_table <- melt(data = Counts_table, id.vars = "Combined_diseases", measure.vars = c("Agonistic", "Antagonistic"))
ggplot(data = new_Counts_table
, aes(x = Combined_diseases, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ variable) + scale_fill_manual(values=c("#997799", "#E69F00")) + theme(aspect.ratio = 0.9/1,
axis.text.x = element_text(angle = 40, hjust = 1, size = 5))
newsort_Counts_table <- new_Counts_table[order(new_Counts_table$Combined_diseases),]
ggplot(data = newsort_Counts_table,
aes(x = 1, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ Combined_diseases) + scale_fill_manual(values=c("#997799", "#E69F00")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())# what's the reader looking at?
#Chi-square table and props
rownames(Counts_table) <- Counts_table[,1]
Counts_table <- Counts_table[,2:3]
chisq.test(Counts_table)
Counts_table<-Counts_table %>% rownames_to_column('new_column')
Counts_table_filtered = Counts_table[ rowSums(Counts_table)!=0, ]
#MOSAIC PLOT
Counts_table <- as.matrix(Counts_table)
mosaic(Counts_table, gp=shading_Friendly2, residuals=chisq.test(Counts_table)$stdres,
residuals_type="Std \ nresiduals",  labeling_args=list(gp_labels=gpar(fontsize=8)),
legend=TRUE,
direction = "h", rot_labels=c(0,0,0,0), spacing = spacing_increase(rate = 1.2) ) # mosaic plot
#Post-Hoc test
#Test for Normality (Shapiro Test)
shapiro.test(Counts_table_filtered$Agonistic)
shapiro.test(Counts_table_filtered$Antagonistic)
pvalues <- c()
for (i in 1:nrow(Counts_table_filtered)){
Agon_posthoc <- c(Counts_table_filtered$Agonistic[i], sum(Counts_table_filtered$Agonistic[-i]))
Antagon_posthoc <- c(Counts_table_filtered$Antagonistic[i], sum(Counts_table_filtered$Antagonistic[-i]))
pv <- as.double(chisq.test(cbind(Agon_posthoc, Antagon_posthoc))["p.value"])
pvalues<- append(pvalues, pv)
print(rownames(Counts_table_filtered)[i])
print(chisq.test(cbind(Agon_posthoc, Antagon_posthoc)))
}
#adjust FDR
names(pvalues) <- as.character(rownames(Counts_table_filtered))
corrected_pvalues <- p.adjust(pvalues, method = "bonferroni", n = length(pvalues))
sorted_corrected_pvalues <- sort(corrected_pvalues)
pleios_df <- as.data.frame(cbind(names(sorted_corrected_pvalues), as.numeric(sorted_corrected_pvalues)))
colnames(pleios_df) <- c("Combined_diseases", "Corrected_pval")
View(pleios_df)
Counts_table_filtered <- Counts_table[ rowSums(Counts_table)!=0, ]
Counts_table<-Counts_table %>% rownames_to_column('new_column')
Counts_table_filtered <- Counts_table[ rowSums(Counts_table)!=0, ]
#IMPORT libraries
library(ape)
library(geiger)
library(nlme)
library(phytools)
library(ggplot2)
library(qqman)
library(qualityTools)
library(Haplin)
library(gridBase)
library(readr)
library(dplyr)
library(reshape2)
library(tibble)
###############
###############
#PHENOTIPIC DB#
###############
#Import Phenotypes from AnAge
Counts_table <- read.csv("freqs_Agon_Antagon.tsv", header = TRUE, sep="\t")
View(Counts_table)
#Description plots
new_Counts_table <- melt(data = Counts_table, id.vars = "Combined_diseases", measure.vars = c("Agonistic", "Antagonistic"))
ggplot(data = new_Counts_table
, aes(x = Combined_diseases, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ variable) + scale_fill_manual(values=c("#997799", "#E69F00")) + theme(aspect.ratio = 0.9/1,
axis.text.x = element_text(angle = 40, hjust = 1, size = 5))
newsort_Counts_table <- new_Counts_table[order(new_Counts_table$Combined_diseases),]
ggplot(data = newsort_Counts_table,
aes(x = 1, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ Combined_diseases) + scale_fill_manual(values=c("#997799", "#E69F00")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())# what's the reader looking at?
#Chi-square table and props
rownames(Counts_table) <- Counts_table[,1]
Counts_table <- Counts_table[,2:3]
chisq.test(Counts_table)
Counts_table<-Counts_table %>% rownames_to_column('new_column')
Counts_table_filtered <- Counts_table[ rowSums(Counts_table)!=0, ]
Counts_table %>% rownames_to_column('new_column')
Counts_table
Counts_table<-Counts_table %>% rownames_to_column('new_column')
library(ape)
library(geiger)
library(nlme)
library(phytools)
library(ggplot2)
library(qqman)
library(qualityTools)
library(Haplin)
library(gridBase)
library(readr)
library(dplyr)
library(reshape2)
library(tibble)
###############
###############
#PHENOTIPIC DB#
###############
#Import Phenotypes from AnAge
Counts_table <- read.csv("freqs_Agon_Antagon.tsv", header = TRUE, sep="\t")
View(Counts_table)
#Description plots
new_Counts_table <- melt(data = Counts_table, id.vars = "Combined_diseases", measure.vars = c("Agonistic", "Antagonistic"))
ggplot(data = new_Counts_table
, aes(x = Combined_diseases, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ variable) + scale_fill_manual(values=c("#997799", "#E69F00")) + theme(aspect.ratio = 0.9/1,
axis.text.x = element_text(angle = 40, hjust = 1, size = 5))
newsort_Counts_table <- new_Counts_table[order(new_Counts_table$Combined_diseases),]
ggplot(data = newsort_Counts_table,
aes(x = 1, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ Combined_diseases) + scale_fill_manual(values=c("#997799", "#E69F00")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())# what's the reader looking at?
#Chi-square table and props
rownames(Counts_table) <- Counts_table[,1]
Counts_table <- Counts_table[,2:3]
chisq.test(Counts_table)
Counts_table
Counts_table_filtered <- Counts_table[rowSums(Counts_table)!=0, ]
Counts_table_filtered
pvalues <- c()
for (i in 1:nrow(Counts_table_filtered)){
Agon_posthoc <- c(Counts_table_filtered$Agonistic[i], sum(Counts_table_filtered$Agonistic[-i]))
Antagon_posthoc <- c(Counts_table_filtered$Antagonistic[i], sum(Counts_table_filtered$Antagonistic[-i]))
pv <- as.double(chisq.test(cbind(Agon_posthoc, Antagon_posthoc))["p.value"])
pvalues<- append(pvalues, pv)
print(rownames(Counts_table_filtered)[i])
print(chisq.test(cbind(Agon_posthoc, Antagon_posthoc)))
}
#adjust FDR
names(pvalues) <- as.character(rownames(Counts_table_filtered))
corrected_pvalues <- p.adjust(pvalues, method = "bonferroni", n = length(pvalues))
sorted_corrected_pvalues <- sort(corrected_pvalues)
pleios_df <- as.data.frame(cbind(names(sorted_corrected_pvalues), as.numeric(sorted_corrected_pvalues)))
colnames(pleios_df) <- c("Combined_diseases", "Corrected_pval")
View(pleios_df)
pleios_df
install.packages("pheatmap")
library(pheatmap)
pleios_df
pleios_matrix <- as.data.frame(cbind(pleios_df$domainA, pleios_df$domainB,
as.numeric(as.character(pleios_df$Corrected_pval))), stringsAsFactors = FALSE)
subset_repeated <- as.data.frame(cbind(pleios_df$domainB, pleios_df$domainA, as.numeric(as.character(pleios_df$Corrected_pval))))
subset_repeated <- subset_repeated[which(as.character(subset_repeated$V1) != as.character(subset_repeated$V2)),]
pleios_matrix_df <- rbind(pleios_matrix, subset_repeated)
pleios_matrix_df <- pleios_matrix_df[order(pleios_matrix_df$V3, decreasing = TRUE),]
pleios_matrix <- acast(pleios_matrix_df,
V1~V2, value.var="V3")
pleios_matrix[is.na(pleios_matrix)] = 1
mode(pleios_matrix) = "numeric"
pleios_matrix
pleios_df
pleios_df[c('domainA','domainB')] <- colsplit(pleios_df$Combined_diseases,'_',c('domainA','domainB'))
pleios_matrix <- as.data.frame(cbind(pleios_df$domainA, pleios_df$domainB,
as.numeric(as.character(pleios_df$Corrected_pval))), stringsAsFactors = FALSE)
subset_repeated <- as.data.frame(cbind(pleios_df$domainB, pleios_df$domainA, as.numeric(as.character(pleios_df$Corrected_pval))))
subset_repeated <- subset_repeated[which(as.character(subset_repeated$V1) != as.character(subset_repeated$V2)),]
pleios_matrix_df <- rbind(pleios_matrix, subset_repeated)
pleios_matrix_df <- pleios_matrix_df[order(pleios_matrix_df$V3, decreasing = TRUE),]
pleios_matrix <- acast(pleios_matrix_df,
V1~V2, value.var="V3")
pleios_matrix[is.na(pleios_matrix)] = 1
mode(pleios_matrix) = "numeric"
pleios_matrix
pleios_df
Counts_table_filtered
names(pvalues)
Counts_table_filtered
Counts_table_filtered
Counts_table_filtered$type <- ifelse(Counts_table_filtered$Agonistic >= Counts_table_filtered$Antagonistic;
"agon"; "antagon")
Counts_table_filtered$type <- ifelse(Counts_table_filtered$Agonistic >= Counts_table_filtered$Antagonistic
"agon", "antagon")
Counts_table_filtered$type <- ifelse(as.numeric(as.character(Counts_table_filtered$Agonistic))
>= as.numeric(as.character(Counts_table_filtered$Antagonistic)),
"agon", "antagon")
Counts_table_filtered
pleios_df
pleios_df
Counts_table_filtered$type
Counts_table_filtered
rownames(Counts_table_filtered)
names(pvalues) <- as.character(rownames(Counts_table_filtered))
Counts_table_filtered$type <- ifelse(as.numeric(as.character(Counts_table_filtered$Agonistic))
>= as.numeric(as.character(Counts_table_filtered$Antagonistic)),
"agon", "antagon")
corrected_pvalues <- p.adjust(pvalues, method = "bonferroni", n = length(pvalues))
sorted_corrected_pvalues <- sort(corrected_pvalues)
pleios_df <- as.data.frame(cbind(names(sorted_corrected_pvalues), as.numeric(sorted_corrected_pvalues)))
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(pleios_df$Combined_diseases[i] %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[Counts_table_filtered$Combined_diseases[i] == rownames(Counts_table_filtered)[i]]),
NA )
}
colnames(pleios_df) <- c("Combined_diseases", "Corrected_pval")
View(pleios_df)
Counts_table_filtered
pleios_df
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(pleios_df$Combined_diseases[i] %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[Counts_table_filtered$Combined_diseases[i] == rownames(Counts_table_filtered)[i]]),
NA )
}
pleios_df
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[Counts_table_filtered$Combined_diseases[i] == rownames(Counts_table_filtered)[i]]),
NA )
}
pleios_df
as.character(pleios_df$Combined_diseases) %in% rownames(Counts_table_filtered)
rownames(Counts_table_filtered)[1]
Counts_table_filtered$Combined_diseases[1]
Counts_table_filtered$Combined_diseases
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[pleios_df$Combined_diseases[i] == rownames(Counts_table_filtered)[i]]),
NA )
}
pleios_df
pleios_df$Combined_diseases[1]
as.character(pleios_df$Combined_diseases[1])
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[as.character(pleios_df$Combined_diseases[i]) == rownames(Counts_table_filtered)]),
NA )
}
pleios_d
pleios_df
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])]),
NA )
}
pleios_df$type
names(pvalues) <- as.character(rownames(Counts_table_filtered))
Counts_table_filtered$type <- ifelse(as.numeric(as.character(Counts_table_filtered$Agonistic))
>= as.numeric(as.character(Counts_table_filtered$Antagonistic)),
"agon", "antagon")
corrected_pvalues <- p.adjust(pvalues, method = "bonferroni", n = length(pvalues))
sorted_corrected_pvalues <- sort(corrected_pvalues)
pleios_df <- as.data.frame(cbind(names(sorted_corrected_pvalues), as.numeric(sorted_corrected_pvalues)))
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])]),
NA )
}
Counts_table_filtered
pleios_df
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])]),
NA )
}
rownames(Counts_table_filtered)
rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[1]
rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[1])
rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[1])
rownames(Counts_table_filtered)
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[1])),]),
NA )
}
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]),
NA )
}
pleios_df
names(pvalues) <- as.character(rownames(Counts_table_filtered))
Counts_table_filtered$type <- ifelse(as.numeric(as.character(Counts_table_filtered$Agonistic))
>= as.numeric(as.character(Counts_table_filtered$Antagonistic)),
"agon", "antagon")
corrected_pvalues <- p.adjust(pvalues, method = "bonferroni", n = length(pvalues))
sorted_corrected_pvalues <- sort(corrected_pvalues)
pleios_df <- as.data.frame(cbind(names(sorted_corrected_pvalues), as.numeric(sorted_corrected_pvalues)))
Counts_table_filtered
pleios_df
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]),
NA )
}
pleios_df
colnames(pleios_df) <- c("Combined_diseases", "Corrected_pval")
pleios_d
pleios_df
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered$type[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]),
NA )
}
for ( i in 1:length(pleios_df$Combined_diseases)){
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
as.character(Counts_table_filtered[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]$type),
NA )
}
pleios_df
Counts_table_filtered[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[1])),]
for ( i in 1:length(pleios_df$Combined_diseases)){
subset <- Counts_table_filtered[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[1])),]
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
subset$type,
NA )
}
pleios_df
subset
for ( i in 1:length(pleios_df$Combined_diseases)){
subset <- Counts_table_filtered[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]
pleios_df$type  <- ifelse(as.character(pleios_df$Combined_diseases[i]) %in% rownames(Counts_table_filtered),
subset$type,
NA )
}
pleios_df
subset
Counts_table_filtered$type
pleios_df
subset
for ( i in 1:length(pleios_df$Combined_diseases)){
subset <- Counts_table_filtered[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]
pleios_df$type  <- subset$type
}
pleios_df
Counts_table_filtered
for ( i in 1:length(pleios_df$Combined_diseases)){
subset <- Counts_table_filtered[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]
pleios_df$type[i]  <- subset$type[1]
}
pleios_df
pvalues <- c()
for (i in 1:nrow(Counts_table_filtered)){
Agon_posthoc <- c(Counts_table_filtered$Agonistic[i], sum(Counts_table_filtered$Agonistic[-i]))
Antagon_posthoc <- c(Counts_table_filtered$Antagonistic[i], sum(Counts_table_filtered$Antagonistic[-i]))
pv <- as.double(chisq.test(cbind(Agon_posthoc, Antagon_posthoc))["p.value"])
pvalues<- append(pvalues, pv)
excess_agon <- abs(Counts_table_filtered$Agonistic[i] - sum(Counts_table_filtered$Agonistic[-i]))
excess_antagon <- abs(Counts_table_filtered$Antagonistic[i] - sum(Counts_table_filtered$Antagonistic[-i]))
Counts_table_filtered$type[i] <- ifelse(as.numeric(as.character(excess_agon))
>= as.numeric(as.character(excess_antagon)),
"agon", "antagon")
print(rownames(Counts_table_filtered)[i])
print(chisq.test(cbind(Agon_posthoc, Antagon_posthoc)))
}
excess_agon
excess_antagon
Agon_posthoc
Agon_posthoc
Antagon_posthoc
Counts_table_filtered
pleios_df
pvalues <- c()
for (i in 1:nrow(Counts_table_filtered)){
Agon_posthoc <- c(Counts_table_filtered$Agonistic[i], sum(Counts_table_filtered$Agonistic[-i]))
Antagon_posthoc <- c(Counts_table_filtered$Antagonistic[i], sum(Counts_table_filtered$Antagonistic[-i]))
pv <- as.double(chisq.test(cbind(Agon_posthoc, Antagon_posthoc))["p.value"])
pvalues<- append(pvalues, pv)
print(rownames(Counts_table_filtered)[i])
print(chisq.test(cbind(Agon_posthoc, Antagon_posthoc)))
}
#adjust FDR
names(pvalues) <- as.character(rownames(Counts_table_filtered))
Counts_table_filtered$type <- ifelse(as.numeric(as.character(Counts_table_filtered$Agonistic))
>= as.numeric(as.character(Counts_table_filtered$Antagonistic)),
"agon", "antagon")
corrected_pvalues <- p.adjust(pvalues, method = "bonferroni", n = length(pvalues))
sorted_corrected_pvalues <- sort(corrected_pvalues)
pleios_df <- as.data.frame(cbind(names(sorted_corrected_pvalues), as.numeric(sorted_corrected_pvalues)))
colnames(pleios_df) <- c("Combined_diseases", "Corrected_pval")
for ( i in 1:length(pleios_df$Combined_diseases)){
subset <- Counts_table_filtered[which(rownames(Counts_table_filtered) == as.character(pleios_df$Combined_diseases[i])),]
pleios_df$type[i]  <- subset$type
}
View(pleios_df)
pleios_df
Counts_table_filtered
Counts_table_filtered$type <- ifelse(as.numeric(as.character(Counts_table_filtered$Agonistic))
>= as.numeric(as.character(Counts_table_filtered$Antagonistic)),
"agon", "antagon")
Counts_table_filtered$type
Counts_table_filtered[c('domainA','domainB')] <- colsplit(rownames(Counts_table_filtered),'_',c('domainA','domainB'))
Counts_table_filtered
subset_repeated <- as.data.frame(cbind(Counts_table_filtered$domainB, Counts_table_filtered$domainA, as.numeric(as.character(Counts_table_filtered$Agonistic))))
subset_repeated
subset_repeated <- subset_repeated[which(as.character(subset_repeated$V1) != as.character(subset_repeated$V2)),]
pleios_matrix_df <- rbind(pleios_matrix, subset_repeated)
pleios_matrix_df <- pleios_matrix_df[order(pleios_matrix_df$V3, decreasing = TRUE),]
pleios_matrix_df
View(pleios_matrix)
View(pleios_matrix)
subset_repeated
Counts_table_filtered
pleios_matrix <- as.data.frame(cbind(Counts_table_filtered$domainA, Counts_table_filtered$domainB,
as.numeric(as.character(Counts_table_filtered$Agonistic))), stringsAsFactors = FALSE)
pleios_matrix
pleios_matrix <- acast(pleios_matrix_df,
V1~V2, value.var="V3")
pleios_matrix[is.na(pleios_matrix)] = 1
pleios_matrix
pleios_matrix <- as.data.frame(cbind(Counts_table_filtered$domainA, Counts_table_filtered$domainB,
as.numeric(as.character(Counts_table_filtered$Agonistic))), stringsAsFactors = FALSE)
pleios_matrix <- acast(pleios_matrix,
V1~V2, value.var="V3")
pleios_matrix[is.na(pleios_matrix)] = 1
pleios_matrix
Counts_table_filtered[c('domainA','domainB')] <- colsplit(rownames(Counts_table_filtered),'_',c('domainA','domainB'))
pleios_matrix <- as.data.frame(cbind(Counts_table_filtered$domainA, Counts_table_filtered$domainB,
as.numeric(as.character(Counts_table_filtered$Agonistic))), stringsAsFactors = FALSE)
subset_repeated <- as.data.frame(cbind(Counts_table_filtered$domainB, Counts_table_filtered$domainA, as.numeric(as.character(Counts_table_filtered$Agonistic))))
subset_repeated <- subset_repeated[which(as.character(subset_repeated$V1) != as.character(subset_repeated$V2)),]
pleios_matrix_df <- rbind(pleios_matrix, subset_repeated)
pleios_matrix_df <- pleios_matrix_df[order(pleios_matrix_df$V3, decreasing = TRUE),]
pleios_matrix <- acast(pleios_matrix_df,
V1~V2, value.var="V3")
pleios_matrix
pleios_matrix[is.na(pleios_matrix)] = 1
mode(pleios_matrix) = "numeric"
Counts_table_filtered[c('domainA','domainB')] <- colsplit(rownames(Counts_table_filtered),'_',c('domainA','domainB'))
pleios_matrix <- as.data.frame(cbind(Counts_table_filtered$domainA, Counts_table_filtered$domainB,
as.numeric(as.character(Counts_table_filtered$Agonistic))), stringsAsFactors = FALSE)
subset_repeated <- as.data.frame(cbind(Counts_table_filtered$domainB, Counts_table_filtered$domainA, as.numeric(as.character(Counts_table_filtered$Agonistic))))
subset_repeated <- subset_repeated[which(as.character(subset_repeated$V1) != as.character(subset_repeated$V2)),]
pleios_matrix_df <- rbind(pleios_matrix, subset_repeated)
pleios_matrix_df <- pleios_matrix_df[order(pleios_matrix_df$V3, decreasing = TRUE),]
pleios_matrix <- acast(pleios_matrix_df,
V1~V2, value.var="V3")
pleios_matrix[is.na(pleios_matrix)] = 0
mode(pleios_matrix) = "numeric"
pleios_matrix
library(pheatmap)
ggplot(data = new_Counts_table
, aes(x = Combined_diseases, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
labs(x = 'Combination_of_disease', y = NULL, fill = 'Type'
, title = 'Proportions of Pleiotropye type by Combination') +
facet_wrap(~ variable) + scale_fill_manual(values=c("#997799", "#E69F00")) + theme(aspect.ratio = 0.9/1,
axis.text.x = element_text(angle = 40, hjust = 1, size = 5))
pleios_matrix
